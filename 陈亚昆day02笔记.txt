**day02**

数据类型简介
	

	1- typeOf操作符
		判断一个变量的数据类型返回值 number, string, boolean, undefined, null, object
	2- Number类型
	    基本的一些数字
	3- string操作符
		用单引号或双引号括起来的内容，
		双引号不能嵌套双引号，单引号
		
		通过+号来拼接   +号起到了字符串拼接的作用, 也可以进行
		
	4- Boolean类型
		布尔类型，true和false
	5- Null类型
	6- undefined类型
		变量未定义时就是undefined类型
	7- object类型
		数组，函数，日期  返回值都是对象
		
	 	var obj = {name:"尼古拉斯.赵四",age: 18};
 运算符:
      用于做运算的符号就叫运算符

      算术运算符 + - * / %  ++ --
      逻辑运算符  &&  ||  !
      比较运算符  > <  >=   <=   ==  ===  !=   !==
      赋值运算符  = += -= *= /= %=
      其他运算符 - 三元运算符 条件表达式 ? 条件表达式为真执行的语句 : 条件表达式为假执行的语句


      表达式：
      把相同类型的数据用运算符按照一定的顺序拼接起来的，有意义的式子就是表达式
       &&  并且    全真为真（ 左右的结果都为真），其余为假   
            ||  或      全假为假，其余为真 ,只要有一个为真，就是true
            !   取反    - 真变假，假变真

函数:

总结： 函数概念：函数是由事件驱动或者被调用的时候执行的可被重复利用的代码块


        函数是一组可以随时随地运行的语句
        作用：
         使程序变得简洁清晰
         易于代码维护
         提高了代码的复用性，提高程序开发的效率
    
        函数定义
           
           function 函数名(参数1，参数2){
               函数体 ---函数里面要执行的代码块
           }
           
        函数命名
    
          标识符：变量、函数、属性的名字，或者函数的参数名


        函数创建--
        第一种创建函数的方式 （- 具名函数-- - 函数声明）
        function 函数名(参数1，参数2) { 函数体 }


        第二种创建函数的方式  函数表达式-- 匿名函数
        var fun = function (参数1，参数2) { 函数体 }
    
        var fun = function (a, b) {
            return a * b;
        }
    
        console.log(fun(5, 3))


        第三种创建函数的方式，不常用。了解
    
        var fun1 = new Function('a', 'b', 'alert(a*b)');
    
        fun1(3, 4);
        
 形参  --函数创建的时候
       实参  ---函数调用的时候

       形参和实参一一对应
    
       实参大于形参-----
       arguments 对象 ---创建了函数，arguments存在，arguments里面存的是所有的实参;
       arguments[0]  第一个实参
       arguments[1]  第二个实参
       。。。。


       形参大于实参 -----
       
       多了的这个形参的值默认是undefined

        // 默认情况下，函数的返回值是undefined
        // return  1.函数的返回值   2.终止当前函数运行
**js的预解析**

      预解析的顺序是从上到下，函数的优先级高于变量，函数声明提前到当前作用域最顶端，在var之上。
函数执行的时候，函数内部才会进行预解析，如果有参数，先给实参赋值再进行函数内部的预解析。

        1.遇到 var  function  先存到内存中，赋值undefined   全局变量a  全局函数fun1 ---在fun1里面存局部变量
        2.赋值函数提升与变量提升

    
      当js中函数或变量在未声明之前使用，
      那么函数或变量的声明将被提升到当前作用域的最顶部，
      这就叫变量提升


      函数的生命周期：函数运行结束--函数以及里面的变量被js的垃圾回收机制回收了
      代码的执行顺序 ：代码从上到下执行--函数只有在调用的时候才会执行
**string对象**

    String对象：用来处理文本字符串的一个对象
    
         String对象的创建方式：
             1. 字面量的方式创建对象 var str = "Hello String!!!";
             2. 使用new关键字来创建对象 var str = new String();
             3. var str = String();
    
         String对象的属性：
             length        返回字符串的长度；也就是字符串中字符的个数
    
         字符串访问：通过下标访问，从0开始   从length-1结束

 

            charAt(index)  获取指定索引处的字符    
            charCodeAt():返回指定位置的字符的 Unicode 编码。
            fromCharCode():可接受一个指定的 Unicode 值，然后返回一个字符串。  // 通过String调用


                concat(str1,str2,str3,...)    拼接一个或多个字符串
                split()  字符串切割，切割后返回数组  ----字符串分割成字符串数组
                search()  获取某个字符或者字符串片段首次出现的位置
                match()   匹配某个符合条件的字符或者字符串，并返回一个数组
                replace()   替换
    
        slice(start,end)         获取两个索引之间的字符串片段，第二个参数（结束索引）如果不写，默认截取从起始索引一直到最后的字符串片段
      
        substring(start,end)    获取两个索引之间的字符串片段，第二个参数（结束索引）如果不写，默认截取从起始索引一直到最后的字符串片段
        
        substr(start,length)       获取从指定索引出开始，指定长度的字符串片段；第二个参数（截取的片段长度）如果不写，默认截取从起始索引一直到最后的字符串片段
       
            indexOf()      获取某个字符或者字符串片段首次出现的位置
            lastIndexOf()  获取某个字符或者字符串片段最后一次出现的位置


            trim()   去除字符串两边的空白;返回一个新的字符串
            toUpperCase()   // 转换为大写
            toLowerCase()   // 转换为小写